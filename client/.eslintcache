[{"/Users/benjamin/CoVent/client/src/utils/firebase.ts":"1","/Users/benjamin/CoVent/client/src/components/landingPage/topBarLandingPage/TopBarNewMatchesButton/TopBarNewMatchesButton.tsx":"2","/Users/benjamin/CoVent/client/src/components/ProfilePage/profilePage.tsx":"3","/Users/benjamin/CoVent/client/src/reportWebVitals.ts":"4","/Users/benjamin/CoVent/client/src/components/landingPage/landingPage.tsx":"5","/Users/benjamin/CoVent/client/src/App.tsx":"6"},{"size":410,"mtime":1607337530190,"results":"7","hashOfConfig":"8"},{"size":766,"mtime":1607207003320,"results":"9","hashOfConfig":"8"},{"size":8579,"mtime":1607298130135,"results":"10","hashOfConfig":"8"},{"size":425,"mtime":1607178671761,"results":"11","hashOfConfig":"8"},{"size":1100,"mtime":1607178671757,"results":"12","hashOfConfig":"8"},{"size":779,"mtime":1607294978122,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f1vmr5",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/benjamin/CoVent/client/src/utils/firebase.ts",[],"/Users/benjamin/CoVent/client/src/components/landingPage/topBarLandingPage/TopBarNewMatchesButton/TopBarNewMatchesButton.tsx",["28"],"/Users/benjamin/CoVent/client/src/components/ProfilePage/profilePage.tsx",["29","30","31","32","33","34","35","36","37"],"import React from 'react';\nimport { FormEvent, useState } from 'react'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from '../../types/combinedStoreTypes';\nimport { Profile, User } from \"../../types/userTypes\";\nimport { Button, Modal } from 'react-bootstrap';\nimport { setUser } from \"../../redux/userState/userActions\";\nimport { profileUpdate, addCityToProfile } from '../../utils/systemFunction';\nimport { UserL, City, ProfileNew, CityAdd } from \"../../types/userLucasTypes\";\nimport './profilePage.css'\n\nexport const ProfilePage = () => {\n  const user = useSelector((state: RootState) => state.user)\n  const dispatch = useDispatch();\n\n  const initialState = {\n    picture: '',\n    description: '',\n    age: '',\n    gender: '',\n    location: '',\n  }\n\n  const initialStateCity: CityAdd = {\n    profileId: 0,\n    name: ''\n  }\n\n  console.log('INSIDE PROFILE-->');\n\n\n  // const [newUserDescription, setNewUserDescription] = useState<Profile>(initialState);\n  const [show, setShow] = useState(false);\n  const [showCityModal, setShowCityModal] = useState(false);\n  const [picture, setPicture] = useState('')\n  const [description, setDescription] = useState('')\n  const [age, setAge] = useState('')\n  const [gender, setGender] = useState('')\n  const [location, setLocation] = useState('')\n  const [city, setCity] = useState('');\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const handleCloseCity = () => setShowCityModal(false);\n  const handleShowCity = () => setShowCityModal(true);\n\n\n\n  const handleChange = (ev: React.ChangeEvent<HTMLInputElement>, cb: any) => {\n    cb(ev.target.value)\n  };\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault()\n\n    if (user && user.profile) {\n      const newUs: User = {\n        ...user, profile: {\n          age: age !== \"\" ? age : user.profile.age,\n          categories: user.profile.categories,\n          cities: user.profile.cities,\n          description: description !== \"\" ? description : user.profile.description,\n          gender: gender !== \"\" ? gender : user.profile.gender,\n          hasNewMatch: user.profile.hasNewMatch,\n          id: user.profile.id,\n          likedProfile: user.profile.likedProfile,\n          location: location !== \"\" ? location : user.profile.location,\n          matched: user.profile.matched,\n          picture: picture !== \"\" ? picture : user.profile.picture,\n          receivedLike: user.profile.receivedLike,\n          userId: user.id,\n        }\n      }\n      dispatch(profileUpdate(newUs))\n    }\n  };\n\n  const handleCitySubmit = (e: FormEvent) => {\n    e.preventDefault()\n    if (user.profile && user.profile.id) {\n      const cityObj: CityAdd = {\n        profileId: user.profile.id,\n        name: city\n      }\n      console.log('city-->', city);\n      console.log('cityObj-->', cityObj);\n      dispatch(addCityToProfile(cityObj, user))\n    }\n  };\n\n  return (\n    <div id=\"profile_body\">\n     \n      <div className=\"profile_page_container\">\n\n        <div className=\"profile_page_header_container\">\n\n          <div>\n          <div className=\"user_first_name\">Benjamin</div>\n          <div>{user.profile && user.profile.age}</div>\n          </div>\n\n          <div className=\"profile_page_image_container\">\n            <img className=\"profile_page_image\" src={user.profile?.picture} alt=\"profile\" />\n          </div>\n\n          <div id=\"top_right_corner_btn\">\n            <Button variant=\"primary\" onClick={handleShow} className=\"profile_updatebutton\">Edit Profile</Button>\n            <Button variant=\"primary\" onClick={handleShowCity} className=\"city_add\">Pick a city</Button>\n          </div>\n        </div>\n\n        <div id=\"profile-page-body\">\n          <div id=\"selected-city\">Your city: {user && user.profile && user.profile.cities && user.profile.cities[0] && user.profile.cities[0].name}</div>\n\n          <div>Select activity first before going to matching</div>\n\n          <div id=\"sent-invitations-area\">\n            Invitations sent: {user && user.profile && user.profile.likedProfile &&\n            user.profile.likedProfile[0] && user.profile.likedProfile[0].user\n            && user.profile.likedProfile.map(el => el.user && el.user.firstName) }\n          </div>\n\n          <div id=\"received-invitation-area\">\n            <div id=\"received-invitation-title\">Invitations received: {user && user.profile && user.profile.receivedLike &&\n                user.profile.receivedLike[0] && user.profile.receivedLike[0].user\n                && user.profile.receivedLike.map(el => el.user && el.user.firstName) } \n            </div>\n            <div></div>\n            <Button id=\"accept-invitation-btn\">Accept</Button>\n            <Button id=\"reject-invitation-btn\">Decline</Button>\n          </div>  \n{/* \n          <Button variant=\"primary\" onClick={handleShowCity} className=\"city_add\">\n              Remove me\n          </Button> */}\n\n        </div>\n\n            <Modal show={show} onHide={handleClose}>\n            <div id=\"modal-background\">\n              <div id=\"edit-profile-modal-form\">\n              <Modal.Header>\n                <Modal.Title id=\"edit-profile-title\">Edit Your Profile</Modal.Title>\n                <Modal.Body>\n                  \n                    <form>\n                      <input name=\"picture\" id=\"\" placeholder=\"Picture\" onChange={(e) => {\n                        handleChange(e, setPicture)\n                      }}></input>\n                      <input name=\"description\" id=\"\" placeholder=\"Description\" onChange={(e) => {\n                        handleChange(e, setDescription)\n                      }}></input>\n                      <input name=\"age\" id=\"\" placeholder=\"Age\" onChange={(e) => {\n                        handleChange(e, setAge)\n                      }}></input>\n                      <input name=\"gender\" id=\"\" placeholder=\"Gender\" onChange={(e) => {\n                        handleChange(e, setGender)\n                      }}></input>\n                      <input name=\"location\" id=\"\" placeholder=\"Location\" onChange={(e) => {\n                        handleChange(e, setLocation)\n                      }}></input>\n                    </form>\n                  \n                </Modal.Body>\n                <Modal.Footer>\n                  <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                  </Button>\n                  <Button variant=\"primary\" onClick={(e) => {\n                    handleSubmit(e)\n                    handleClose()\n                  }}>\n                    Save Changes\n                  </Button>\n                </Modal.Footer>\n              </Modal.Header>\n              </div>\n              </div>\n            </Modal>\n\n\n          <div>\n            <Modal show={showCityModal} onHide={handleCloseCity}>\n              <Modal.Header>\n                <Modal.Title>Add your City</Modal.Title>\n                <Modal.Body>\n                  <form>\n                    <input name=\"city\" id=\"\" placeholder=\"City\" onChange={(e) => {\n                      handleChange(e, setCity)\n                    }}></input>\n                  </form>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Button variant=\"secondary\" onClick={handleCloseCity}>\n                    Close\n                  </Button>\n                  <Button variant=\"primary\" onClick={(e) => {\n                    handleCitySubmit(e)\n                    handleCloseCity()\n                  }}>\n                    Select\n                  </Button>\n                </Modal.Footer>\n              </Modal.Header>\n            </Modal>\n\n          </div>\n\n        </div>\n      \n\n      <div>\n            <Modal show={showCityModal} onHide={handleCloseCity}>\n              <Modal.Header>\n                <Modal.Title>Add your City</Modal.Title>\n                <Modal.Body>\n                  <form>\n                    <input name=\"city\" id=\"\" placeholder=\"City\" onChange={(e) => {\n                      handleChange(e, setCity)\n                    }}></input>\n                  </form>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Button variant=\"secondary\" onClick={handleCloseCity}>\n                    Close\n                  </Button>\n                  <Button variant=\"primary\" onClick={(e) => {\n                    handleCitySubmit(e)\n                    handleCloseCity()\n                  }}>\n                    Select\n                  </Button>\n                </Modal.Footer>\n              </Modal.Header>\n            </Modal>\n\n          </div>\n\n\n    </div>\n  )\n}","/Users/benjamin/CoVent/client/src/reportWebVitals.ts",["38"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/Users/benjamin/CoVent/client/src/components/landingPage/landingPage.tsx",["39","40","41","42","43","44","45"],"/Users/benjamin/CoVent/client/src/App.tsx",["46"],{"ruleId":"47","severity":1,"message":"48","line":9,"column":39,"nodeType":"49","messageId":"50","endLine":9,"endColumn":44},{"ruleId":"51","severity":1,"message":"52","line":5,"column":10,"nodeType":"53","messageId":"54","endLine":5,"endColumn":17},{"ruleId":"51","severity":1,"message":"55","line":7,"column":10,"nodeType":"53","messageId":"54","endLine":7,"endColumn":17},{"ruleId":"51","severity":1,"message":"56","line":9,"column":10,"nodeType":"53","messageId":"54","endLine":9,"endColumn":15},{"ruleId":"51","severity":1,"message":"57","line":9,"column":17,"nodeType":"53","messageId":"54","endLine":9,"endColumn":21},{"ruleId":"51","severity":1,"message":"58","line":9,"column":23,"nodeType":"53","messageId":"54","endLine":9,"endColumn":33},{"ruleId":"47","severity":1,"message":"48","line":12,"column":28,"nodeType":"49","messageId":"50","endLine":12,"endColumn":33},{"ruleId":"51","severity":1,"message":"59","line":16,"column":9,"nodeType":"53","messageId":"54","endLine":16,"endColumn":21},{"ruleId":"51","severity":1,"message":"60","line":24,"column":9,"nodeType":"53","messageId":"54","endLine":24,"endColumn":34},{"ruleId":"61","severity":1,"message":"62","line":50,"column":70,"nodeType":"63","messageId":"64","endLine":50,"endColumn":73,"suggestions":"65"},{"ruleId":"47","severity":1,"message":"48","line":3,"column":25,"nodeType":"49","messageId":"50","endLine":3,"endColumn":57},{"ruleId":"51","severity":1,"message":"66","line":1,"column":31,"nodeType":"53","messageId":"54","endLine":1,"endColumn":40},{"ruleId":"51","severity":1,"message":"67","line":6,"column":10,"nodeType":"53","messageId":"54","endLine":6,"endColumn":21},{"ruleId":"51","severity":1,"message":"68","line":9,"column":10,"nodeType":"53","messageId":"54","endLine":9,"endColumn":21},{"ruleId":"51","severity":1,"message":"69","line":10,"column":10,"nodeType":"53","messageId":"54","endLine":10,"endColumn":29},{"ruleId":"51","severity":1,"message":"70","line":11,"column":10,"nodeType":"53","messageId":"54","endLine":11,"endColumn":32},{"ruleId":"51","severity":1,"message":"71","line":15,"column":9,"nodeType":"53","messageId":"54","endLine":15,"endColumn":17},{"ruleId":"51","severity":1,"message":"72","line":16,"column":9,"nodeType":"53","messageId":"54","endLine":16,"endColumn":21},{"ruleId":"47","severity":1,"message":"48","line":9,"column":1,"nodeType":"73","messageId":"50","endLine":9,"endColumn":15},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'Profile' is defined but never used.","Identifier","unusedVar","'setUser' is defined but never used.","'UserL' is defined but never used.","'City' is defined but never used.","'ProfileNew' is defined but never used.","'initialState' is assigned a value but never used.","'initialStateCity' is assigned a value but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["74","75"],"'useEffect' is defined but never used.","'setUserName' is defined but never used.","'ProfilePage' is defined but never used.","'getUserByIdDispatch' is defined but never used.","'registerUserToDataBase' is defined but never used.","'dispatch' is assigned a value but never used.","'firebaseUser' is assigned a value but never used.","FunctionDeclaration",{"messageId":"76","fix":"77","desc":"78"},{"messageId":"79","fix":"80","desc":"81"},"suggestUnknown",{"range":"82","text":"83"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"82","text":"84"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[1626,1629],"unknown","never"]