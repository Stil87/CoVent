[{"/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/redux/combinedStore.ts":"1","/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/components/ProfilePage/profilePage.tsx":"2","/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/components/Swiping/swiping.tsx":"3","/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/reportWebVitals.ts":"4","/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/components/Chat/chat.tsx":"5","/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/components/landingPage/topBarLandingPage/TopBarLandingPageLogInButton/TopBarLandingPageLogInButton.tsx":"6","/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/utils/firebase.ts":"7","/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/components/landingPage/landingPage.tsx":"8","/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/components/landingPage/topBarLandingPage/TopBarNewMatchesButton/TopBarNewMatchesButton.tsx":"9"},{"size":500,"mtime":1607358815405,"results":"10","hashOfConfig":"11"},{"size":12324,"mtime":1607362721795,"results":"12","hashOfConfig":"11"},{"size":1473,"mtime":1607358847610,"results":"13","hashOfConfig":"11"},{"size":425,"mtime":1606492579365,"results":"14","hashOfConfig":"11"},{"size":118,"mtime":1607358815398,"results":"15","hashOfConfig":"11"},{"size":1145,"mtime":1607358815402,"results":"16","hashOfConfig":"11"},{"size":756,"mtime":1607358997432,"results":"17","hashOfConfig":"11"},{"size":3196,"mtime":1607358815401,"results":"18","hashOfConfig":"11"},{"size":766,"mtime":1607358815403,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"189wvhq",{"filePath":"22","messages":"23","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/redux/combinedStore.ts",[],"/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/components/ProfilePage/profilePage.tsx",["42","43","44","45","46","47","48","49","50","51"],"import React from 'react';\nimport { FormEvent, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from '../../types/combinedStoreTypes';\nimport { User } from \"../../types/userTypes\";\nimport { Button, Modal } from 'react-bootstrap';\nimport { profileUpdate, addCityToProfile, addCategoryToProfile } from '../../utils/systemFunction';\nimport { ProfileNew, CityAdd } from \"../../types/userLucasTypes\";\nimport './profilePage.css';\nimport { Link } from 'react-router-dom';\nimport { getAllProfiles } from './../../utils/userDatabaseFetch';\nimport { addLike } from './../../utils/systemFunction';\n\nexport const ProfilePage = () => {\n\n  console.log('INSIDE PROFILE-->');\n  const user = useSelector((state: RootState) => state.user)\n  const currentDirection = useSelector((state: RootState) => state.direction)\n  const dispatch = useDispatch();\n\n  const initialState = {\n    picture: '',\n    description: '',\n    age: '',\n    gender: '',\n    location: '',\n  }\n\n  const initialStateCity: CityAdd = {\n    profileId: 0,\n    name: ''\n  }\n\n\n  const categories = [\n    'Athletics',\n    'Ball Sports',\n    'Beach Sports',\n    'Body & Mind',\n    'Cars',\n    'City',\n    'Climbing',\n    'Combat Sports',\n    'Cycling',\n    'Dancing',\n    'Equestrianism',\n    'Fishing: Catch & Release',\n    'Fitness',\n    'For Fun',\n    'Games',\n    'Hiking',\n    'Ice',\n    'Motorcycles',\n    'Multi-Sport',\n    'Nature',\n    'Party',\n    'Photography',\n    'Piloting',\n    'Pool',\n    'Racket Sports',\n    'Radio-controlled Piloting',\n    'Rowing',\n    'Shooting',\n    'Sky',\n    'Slacklining',\n    'Snow',\n    'Strength',\n    'Traveling',\n    'Underwater',\n    'Water',\n    'Wildlife Viewing',\n    'Wind'\n  ]\n\n  const [show, setShow] = useState(false);\n  const [showCityModal, setShowCityModal] = useState(false);\n  const [picture, setPicture] = useState('')\n  const [description, setDescription] = useState('')\n  const [age, setAge] = useState('')\n  const [gender, setGender] = useState('')\n  const [location, setLocation] = useState('')\n  const [city, setCity] = useState('');\n  const [category, setCategory] = useState('');\n  const [showCategoryModal, setShowCategoryModal] = useState(false);\n\n  const [profiles, setProfiles] = useState<ProfileNew[]>([]);\n\n  useEffect(() => {\n    getAllProfiles()\n      .then((list) => {\n        const filteredList = list.filter((el) => el.id !== user.id)\n        setProfiles(filteredList)\n        filterProfilesToShowExceptSwipedOnes(user, list)\n        if (currentDirection.length && user.profile && user.profile.id) {\n          sendLikesToBackEnd(currentDirection, user.profile.id)\n        }\n      })\n  }, []);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const handleCloseCity = () => setShowCityModal(false);\n  const handleShowCity = () => setShowCityModal(true);\n  const handleShowCategory = () => setShowCategoryModal(true);\n  const handleCloseCategory = () => setShowCategoryModal(false);\n\n  const handleChange = (ev: React.ChangeEvent<HTMLInputElement>, cb: any) => {\n    cb(ev.target.value)\n  };\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault()\n\n    if (user && user.profile) {\n      const newUs: User = {\n        ...user, profile: {\n          age: age !== \"\" ? age : user.profile.age,\n          categories: user.profile.categories,\n          cities: user.profile.cities,\n          description: description !== \"\" ? description : user.profile.description,\n          gender: gender !== \"\" ? gender : user.profile.gender,\n          hasNewMatch: user.profile.hasNewMatch,\n          id: user.profile.id,\n          likedProfile: user.profile.likedProfile,\n          location: location !== \"\" ? location : user.profile.location,\n          matched: user.profile.matched,\n          picture: picture !== \"\" ? picture : user.profile.picture,\n          receivedLike: user.profile.receivedLike,\n          userId: user.id,\n        }\n      }\n      dispatch(profileUpdate(newUs))\n    }\n  };\n\n  const handleCitySubmit = (e: FormEvent) => {\n    e.preventDefault()\n    if (user.profile && user.profile.id) {\n      const cityObj: CityAdd = {\n        profileId: user.profile.id,\n        name: city\n      }\n      dispatch(addCityToProfile(cityObj, user))\n    }\n  };\n\n  const handleCategorySubmit = (ev: any): any => {\n    console.log('e.target.value-->', ev.target.value);\n    setCategory(ev.target.value)\n    const categoryToSend = {\n      profileId: user.profile && user.profile.id,\n      name: ev.target.value\n    }\n    dispatch(addCategoryToProfile(categoryToSend, user))\n  };\n\n  const filterSwipedProfiles = (profiles: ProfileNew[], currentDir: string[]): ProfileNew[] => {\n    const result = [];\n    for (let i = 0; i < profiles.length; i++) {\n      let flag;\n      for (let a = 0; a < currentDir.length; a++) {\n        if (Number(currentDir[a].match(/\\d+/g)) === profiles[i].id) {\n          flag = true;\n          break;\n        }\n      }\n      if (!flag) {\n        result.push(profiles[i]);\n      } else {\n        flag = false;\n      }\n    }\n    return result;\n  };\n\n  const sendLikesToBackEnd = (currentDir: string[], profileId: number): void => {\n    currentDir.forEach((el) => {\n      console.log('el profilePage.tsx, line 174 el: ', el);\n      if (String(el.match(/[^\\s]+/)) === 'right') {\n        dispatch(addLike({\n          profileId: profileId,\n          givenLikeId: el.match(/\\d+/g)\n        }))\n      }\n    })\n  }\n\n  const filterProfilesToShowExceptSwipedOnes = (user: User, list: ProfileNew[]): void => {\n    console.log('user profilePage.tsx, line 188 user: ', user);\n    console.log('list profilePage.tsx, line 189 list: ', list);\n    // create table in back end where you keep track of swiped profiles\n    // user has many swipes ->  a swipe belongs to one user\n  }\n\n  return (\n    <div id=\"profile_body\">\n\n      <div className=\"profile_page_container\">\n\n        <div className=\"profile_page_header_container\">\n\n          <div>\n  <div className=\"user_first_name\">{user.firstName}</div>\n            <div>{user.profile && user.profile.age}</div>\n          </div>\n\n          <div className=\"profile_page_image_container\">\n            <img className=\"profile_page_image\" src={user.profile?.picture} alt=\"profile\" />\n          </div>\n\n          <div id=\"top_right_corner_btn\">\n            <Button variant=\"primary\" onClick={handleShow} className=\"profile_updatebutton\">Edit Profile</Button>\n            <Button variant=\"primary\" onClick={handleShowCity} className=\"city_add\">Pick a city</Button>\n          </div>\n        </div>\n\n        <div id=\"profile-page-body\">\n          <div id=\"selected-city\">Your city: {user && user.profile && user.profile.cities && user.profile.cities[0] && user.profile.cities[0].name}</div>\n\n          <div>Select activity first before going to matching</div>\n\n          <div id=\"sent-invitations-area\">\n            Invitations sent: {user && user.profile && user.profile.likedProfile &&\n              user.profile.likedProfile[0] && user.profile.likedProfile[0].user\n              && user.profile.likedProfile.map(el => <div key={el.id}><img width={\"200\"} src={el.picture}/></div>)}\n          </div>\n\n          <div id=\"received-invitation-area\">\n            <div style={{overflowX:\"scroll\"}} id=\"received-invitation-title\">Invitations received: {user && user.profile && user.profile.receivedLike &&\n              user.profile.receivedLike[0] && user.profile.receivedLike[0].user\n            && user.profile.receivedLike.map(el => \n            <div key={el.id}>\n              <img width={\"200\"} src={el.picture}/>\n            <Button onClick={()=> addLike({profileId:user.id, givenLikeId:el.id})} id=\"accept-invitation-btn\">Accept</Button>\n            <Button onClick={()=>console.log('Declined Button clicked')} id=\"reject-invitation-btn\">Decline</Button>\n              </div>)}\n            </div>\n          </div>\n          {/*\n          <Button variant=\"primary\" onClick={handleShowCity} className=\"city_add\">\n              Remove me\n          </Button> */}\n\n        </div>\n\n        <Modal show={show} onHide={handleClose}>\n          <div id=\"modal-background\">\n            <div id=\"edit-profile-modal-form\">\n              <Modal.Header>\n                <Modal.Title id=\"edit-profile-title\">Edit Your Profile</Modal.Title>\n                <Modal.Body>\n\n                  <form>\n                    <input name=\"picture\" id=\"\" placeholder=\"Picture\" onChange={(e) => {\n                      handleChange(e, setPicture)\n                    }}></input>\n                    <input name=\"description\" id=\"\" placeholder=\"Description\" onChange={(e) => {\n                      handleChange(e, setDescription)\n                    }}></input>\n                    <input name=\"age\" id=\"\" placeholder=\"Age\" onChange={(e) => {\n                      handleChange(e, setAge)\n                    }}></input>\n                    <input name=\"gender\" id=\"\" placeholder=\"Gender\" onChange={(e) => {\n                      handleChange(e, setGender)\n                    }}></input>\n                    <input name=\"location\" id=\"\" placeholder=\"Location\" onChange={(e) => {\n                      handleChange(e, setLocation)\n                    }}></input>\n                  </form>\n\n                </Modal.Body>\n                <Modal.Footer>\n                  <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                  </Button>\n                  <Button variant=\"primary\" onClick={(e) => {\n                    handleSubmit(e)\n                    handleClose()\n                  }}>\n                    Save Changes\n                  </Button>\n                </Modal.Footer>\n              </Modal.Header>\n            </div>\n          </div>\n        </Modal>\n\n\n        <div>\n          <Modal show={showCityModal} onHide={handleCloseCity}>\n            <Modal.Header>\n              <Modal.Title>Add your City</Modal.Title>\n              <Modal.Body>\n                <form>\n                  <input name=\"city\" id=\"\" placeholder=\"City\" onChange={(e) => {\n                    handleChange(e, setCity)\n                  }}></input>\n                </form>\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleCloseCity}>\n                  Close\n                  </Button>\n                <Button variant=\"primary\" onClick={(e) => {\n                  handleCitySubmit(e)\n                  handleCloseCity()\n                }}>\n                  Select\n                  </Button>\n              </Modal.Footer>\n            </Modal.Header>\n          </Modal>\n\n        </div>\n\n      </div>\n\n\n      <div>\n        <Modal show={showCityModal} onHide={handleCloseCity}>\n          <Modal.Header>\n            <Modal.Title>Add your City</Modal.Title>\n            <Modal.Body>\n              <form>\n                <input name=\"city\" id=\"\" placeholder=\"City\" onChange={(e) => {\n                  handleChange(e, setCity)\n                }}></input>\n              </form>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={handleCloseCity}>\n                Close\n                  </Button>\n              <Button variant=\"primary\" onClick={(e) => {\n                handleCitySubmit(e)\n                handleCloseCity()\n              }}>\n                Select\n                  </Button>\n            </Modal.Footer>\n          </Modal.Header>\n        </Modal>\n\n\n      </div>\n\n      <div>\n        <p>Select activity first before going to matching</p>\n\n        <select id=\"mySelect\" onChange={(e) => { handleCategorySubmit(e) }}>\n          {categories.map((el, i) => {\n            return <option key={i} value={el}>{el}</option>\n          })\n          }\n        </select>\n\n\n      </div>\n\n      {/* {user.profile && user.profile.id && currentDirection && currentDirection.length && sendLikesToBackEnd(currentDirection, user.profile.id)} */}\n\n      <Link to={{\n        pathname: '/swiping',\n        state: {\n          profiles: currentDirection.length === 0 ? profiles : filterSwipedProfiles(profiles, currentDirection)\n        }\n      }}>\n        <Button>Swiping</Button>\n      </Link>\n\n      <Link to=\"/matches\">\n        <Button>Matches</Button>\n      </Link>\n\n      <Link to=\"/chat\">\n        <Button>Chat</Button>\n      </Link>\n\n    </div>\n  )\n}","/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/components/Swiping/swiping.tsx",["52","53","54","55","56","57","58","59","60","61","62","63"],"/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/reportWebVitals.ts",["64"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/components/Chat/chat.tsx",["65"],"/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/components/landingPage/topBarLandingPage/TopBarLandingPageLogInButton/TopBarLandingPageLogInButton.tsx",["66","67"],"/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/utils/firebase.ts",[],"/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/components/landingPage/landingPage.tsx",["68","69","70","71","72","73","74"],"import React, { ReactElement, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../types/combinedStoreTypes';\nimport './landingPage.css'\nimport { useDispatch } from 'react-redux'\nimport { setUserName } from '../../redux/userState/userActions';\nimport { TopBarLandingPage } from './topBarLandingPage/topBarLandingPage';\nimport { Searchbar } from './searchbar/searchbar';\nimport { ProfilePage } from '../ProfilePage/profilePage';\nimport { getUserByIdDispatch } from '../../utils/userFunction';\nimport { registerUserToDataBase } from '../../utils/userDatabaseFetch';\nimport { Link } from 'react-router-dom';\nimport { Button, Modal } from 'react-bootstrap';\nimport { getAllProfiles } from './../../utils/userDatabaseFetch';\nimport { ProfileNew, CityAdd } from \"../../types/userLucasTypes\";\nimport { addLike } from './../../utils/systemFunction';\n\n\nexport const LandingPage = (): ReactElement => {\n  const dispatch = useDispatch()\n  const firebaseUser = useSelector((state: RootState) => state.system)\n  const currentUser = useSelector((state: RootState) => state.user)\n  const currentDirection = useSelector((state: RootState) => state.direction)\n  const user = useSelector((state: RootState) => state.user)\n\n\n  const [profiles, setProfiles] = useState<ProfileNew[]>([]);\n\n  useEffect(() => {\n    getAllProfiles()\n      .then((list) => {\n        const filteredList = list.filter((el) => el.id !== user.id)\n        setProfiles(filteredList)\n        // filterProfilesToShowExceptSwipedOnes(user, list)\n        if (currentDirection.length && user.profile && user.profile.id) {\n          sendLikesToBackEnd(currentDirection, user.profile.id)\n        }\n      })\n  }, []);\n\n  const filterSwipedProfiles = (profiles: ProfileNew[], currentDir: string[]): ProfileNew[] => {\n    const result = [];\n    for (let i = 0; i < profiles.length; i++) {\n      let flag;\n      for (let a = 0; a < currentDir.length; a++) {\n        if (Number(currentDir[a].match(/\\d+/g)) === profiles[i].id) {\n          flag = true;\n          break;\n        }\n      }\n      if (!flag) {\n        result.push(profiles[i]);\n      } else {\n        flag = false;\n      }\n    }\n    return result;\n  };\n\n  const sendLikesToBackEnd = (currentDir: string[], profileId: number): void => {\n    currentDir.forEach((el) => {\n      console.log('el profilePage.tsx, line 174 el: ', el);\n      if (String(el.match(/[^\\s]+/)) === 'right') {\n        dispatch(addLike({\n          profileId: profileId,\n          givenLikeId: el.match(/\\d+/g)\n        }))\n      }\n    })\n  }\n\n  return (\n    <>\n      <div className=\"landing_page_container\">\n        {console.log('current user from landingpage', currentUser,)}\n        <TopBarLandingPage />\n      </div>\n      {currentUser.id ?\n\n        <>\n          <Searchbar key={Math.random()} />\n          <Link to={{\n            pathname: '/swiping',\n            state: {\n              profiles: currentDirection.length === 0 ? profiles : filterSwipedProfiles(profiles, currentDirection)\n            }\n          }}>\n            <Button>Swiping</Button>\n          </Link>\n        </>\n        :\n        <>\n          <Searchbar />\n        </>\n      }\n    </>\n  )\n};",[],"/Users/tillschmidt/Documents/Dev/Codeworks_Bootcamp/CoVent/client/src/components/landingPage/topBarLandingPage/TopBarNewMatchesButton/TopBarNewMatchesButton.tsx",["75"],{"ruleId":"76","severity":1,"message":"77","line":14,"column":28,"nodeType":"78","messageId":"79","endLine":14,"endColumn":33},{"ruleId":"80","severity":1,"message":"81","line":21,"column":9,"nodeType":"82","messageId":"83","endLine":21,"endColumn":21},{"ruleId":"80","severity":1,"message":"84","line":29,"column":9,"nodeType":"82","messageId":"83","endLine":29,"endColumn":34},{"ruleId":"80","severity":1,"message":"85","line":83,"column":10,"nodeType":"82","messageId":"83","endLine":83,"endColumn":18},{"ruleId":"80","severity":1,"message":"86","line":84,"column":10,"nodeType":"82","messageId":"83","endLine":84,"endColumn":27},{"ruleId":"80","severity":1,"message":"87","line":104,"column":9,"nodeType":"82","messageId":"83","endLine":104,"endColumn":27},{"ruleId":"80","severity":1,"message":"88","line":105,"column":9,"nodeType":"82","messageId":"83","endLine":105,"endColumn":28},{"ruleId":"89","severity":1,"message":"90","line":107,"column":70,"nodeType":"91","messageId":"92","endLine":107,"endColumn":73,"suggestions":"93"},{"ruleId":"89","severity":1,"message":"90","line":147,"column":37,"nodeType":"91","messageId":"92","endLine":147,"endColumn":40,"suggestions":"94"},{"ruleId":"89","severity":1,"message":"90","line":147,"column":43,"nodeType":"91","messageId":"92","endLine":147,"endColumn":46,"suggestions":"95"},{"ruleId":"80","severity":1,"message":"96","line":1,"column":17,"nodeType":"82","messageId":"83","endLine":1,"endColumn":25},{"ruleId":"80","severity":1,"message":"97","line":1,"column":27,"nodeType":"82","messageId":"83","endLine":1,"endColumn":36},{"ruleId":"80","severity":1,"message":"98","line":4,"column":8,"nodeType":"82","messageId":"83","endLine":4,"endColumn":18},{"ruleId":"80","severity":1,"message":"99","line":5,"column":10,"nodeType":"82","messageId":"83","endLine":5,"endColumn":20},{"ruleId":"80","severity":1,"message":"100","line":6,"column":10,"nodeType":"82","messageId":"83","endLine":6,"endColumn":24},{"ruleId":"80","severity":1,"message":"101","line":9,"column":10,"nodeType":"82","messageId":"83","endLine":9,"endColumn":22},{"ruleId":"76","severity":1,"message":"102","line":11,"column":25,"nodeType":"82","messageId":"103","endLine":11,"endColumn":34},{"ruleId":"89","severity":1,"message":"90","line":11,"column":31,"nodeType":"91","messageId":"92","endLine":11,"endColumn":34,"suggestions":"104"},{"ruleId":"89","severity":1,"message":"90","line":11,"column":37,"nodeType":"91","messageId":"92","endLine":11,"endColumn":40,"suggestions":"105"},{"ruleId":"80","severity":1,"message":"106","line":15,"column":9,"nodeType":"82","messageId":"83","endLine":15,"endColumn":20},{"ruleId":"80","severity":1,"message":"107","line":16,"column":9,"nodeType":"82","messageId":"83","endLine":16,"endColumn":25},{"ruleId":"80","severity":1,"message":"108","line":17,"column":9,"nodeType":"82","messageId":"83","endLine":17,"endColumn":17},{"ruleId":"76","severity":1,"message":"77","line":3,"column":25,"nodeType":"78","messageId":"79","endLine":3,"endColumn":57},{"ruleId":"76","severity":1,"message":"77","line":3,"column":21,"nodeType":"78","messageId":"79","endLine":3,"endColumn":26},{"ruleId":"80","severity":1,"message":"109","line":1,"column":10,"nodeType":"82","messageId":"83","endLine":1,"endColumn":18},{"ruleId":"80","severity":1,"message":"110","line":5,"column":10,"nodeType":"82","messageId":"83","endLine":5,"endColumn":19},{"ruleId":"80","severity":1,"message":"111","line":6,"column":10,"nodeType":"82","messageId":"83","endLine":6,"endColumn":21},{"ruleId":"80","severity":1,"message":"112","line":9,"column":10,"nodeType":"82","messageId":"83","endLine":9,"endColumn":21},{"ruleId":"80","severity":1,"message":"113","line":10,"column":10,"nodeType":"82","messageId":"83","endLine":10,"endColumn":29},{"ruleId":"80","severity":1,"message":"114","line":11,"column":10,"nodeType":"82","messageId":"83","endLine":11,"endColumn":32},{"ruleId":"80","severity":1,"message":"115","line":13,"column":18,"nodeType":"82","messageId":"83","endLine":13,"endColumn":23},{"ruleId":"80","severity":1,"message":"116","line":15,"column":22,"nodeType":"82","messageId":"83","endLine":15,"endColumn":29},{"ruleId":"80","severity":1,"message":"117","line":21,"column":9,"nodeType":"82","messageId":"83","endLine":21,"endColumn":21},{"ruleId":"76","severity":1,"message":"77","line":9,"column":39,"nodeType":"78","messageId":"79","endLine":9,"endColumn":44},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'initialState' is assigned a value but never used.","Identifier","unusedVar","'initialStateCity' is assigned a value but never used.","'category' is assigned a value but never used.","'showCategoryModal' is assigned a value but never used.","'handleShowCategory' is assigned a value but never used.","'handleCloseCategory' is assigned a value but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["118","119"],["120","121"],["122","123"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'TinderCard' is defined but never used.","'ProfileNew' is defined but never used.","'getAllProfiles' is defined but never used.","'setDirection' is defined but never used.","Argument 'prop' should be typed with a non-any type.","anyTypedArg",["124","125"],["126","127"],"'currentUser' is assigned a value but never used.","'currentDirection' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'userInfo' is defined but never used.","'userLogin' is defined but never used.","'setUserName' is defined but never used.","'ProfilePage' is defined but never used.","'getUserByIdDispatch' is defined but never used.","'registerUserToDataBase' is defined but never used.","'Modal' is defined but never used.","'CityAdd' is defined but never used.","'firebaseUser' is assigned a value but never used.",{"messageId":"128","fix":"129","desc":"130"},{"messageId":"131","fix":"132","desc":"133"},{"messageId":"128","fix":"134","desc":"130"},{"messageId":"131","fix":"135","desc":"133"},{"messageId":"128","fix":"136","desc":"130"},{"messageId":"131","fix":"137","desc":"133"},{"messageId":"128","fix":"138","desc":"130"},{"messageId":"131","fix":"139","desc":"133"},{"messageId":"128","fix":"140","desc":"130"},{"messageId":"131","fix":"141","desc":"133"},"suggestUnknown",{"range":"142","text":"143"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"142","text":"144"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"145","text":"143"},{"range":"145","text":"144"},{"range":"146","text":"143"},{"range":"146","text":"144"},{"range":"147","text":"143"},{"range":"147","text":"144"},{"range":"148","text":"143"},{"range":"148","text":"144"},[3078,3081],"unknown","never",[4321,4324],[4327,4330],[468,471],[474,477]]